function model = fixSubsystemsField(model)
% fixSubsystemsField  Ensures that the 'subSystems' field in a RAVEN/Cobra model
%                     exists, is the correct type, and matches the number of reactions.
%
% USAGE:
%   model = fixSubsystemsField(model)
%
% INPUT:
%   model - A RAVEN or COBRA-style model struct that may have:
%           • missing or empty 'subSystems' field
%           • 'subSystems' in the wrong format (e.g. char instead of cell array)
%           • length mismatch between 'subSystems' and 'rxns'
%
% OUTPUT:
%   model - The same model struct but with 'subSystems' fixed to:
%           • exist
%           • be a cell array of length numel(model.rxns)
%           • each element itself a cell array of strings
%
% DESCRIPTION:
%   Many RAVEN functions (including export to SBML) expect 'subSystems' to be a
%   cell array of size (nRxns x 1), where each entry is itself a cell array of 
%   strings describing one or more functional subsystems for the reaction.
%
%   However, draft GEMs often:
%     - lack the field entirely
%     - store it as a character array instead of a cell array
%     - have mismatched sizes after merging models
%
%   This function corrects these issues without altering the subsystem content.
%
% EXAMPLE:
%   model = fixSubsystemsField(model);
%
% See also: exportModel, checkModelStruct
% 
% This code was generated by ChatGPT

    %--------------------------------------------------------------
    % 1. Ensure 'subSystems' field exists
    %--------------------------------------------------------------
    if ~isfield(model, 'subSystems') || isempty(model.subSystems)
        % If missing or empty, initialize with empty strings for each reaction
        model.subSystems = repmat({''}, numel(model.rxns), 1);
    end
    
    %--------------------------------------------------------------
    % 2. Ensure 'subSystems' is a cell array
    %--------------------------------------------------------------
    if ~iscell(model.subSystems)
        % If it's a char matrix or string array, wrap it into a cell array
        model.subSystems = cellstr(model.subSystems);
    end
    
    %--------------------------------------------------------------
    % 3. Fix length mismatch between 'subSystems' and 'rxns'
    %--------------------------------------------------------------
    if numel(model.subSystems) ~= numel(model.rxns)
        warning('subSystems length mismatch; resizing with empty entries.');
        % Create a correctly sized empty cell array
        temp = repmat({''}, numel(model.rxns), 1);
        % Copy as many existing entries as possible into the new array
        n = min(numel(model.subSystems), numel(model.rxns));
        temp(1:n) = model.subSystems(1:n);
        model.subSystems = temp;
    end
    
    %--------------------------------------------------------------
    % 4. Ensure each entry is a *cell array of strings* (nested cell)
    %--------------------------------------------------------------
    for i = 1:numel(model.subSystems)
        if ~iscell(model.subSystems{i})
            % Wrap single strings or empty entries into a 1x1 cell
            model.subSystems{i} = {char(model.subSystems{i})};
        end
    end
end
