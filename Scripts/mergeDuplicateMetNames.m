function model = mergeDuplicateMetNames(model)
% mergeDuplicateMetNames  Merge metabolites with duplicate names in the same compartment.
%
% USAGE:
%   model = mergeDuplicateMetNames(model)
%
% INPUT:
%   model - RAVEN or COBRA-style model structure. Expected fields:
%           • model.mets        - cell array of metabolite IDs
%           • model.metNames    - cell array of human-readable metabolite names
%           • model.S           - stoichiometric matrix (mets × rxns)
%           • model.comps       - cell array of compartment IDs (optional but recommended)
%           • model.metComps    - numeric indices into model.comps, or cell array of comp IDs
%
%           Optional fields that will also be updated if present:
%           • model.metFormulas
%           • model.metCharges
%           • model.b
%           • model.metNotes
%
% OUTPUT:
%   model - The same model, but with:
%           • Duplicate metabolites (same name + same compartment) merged
%           • Stoichiometric coefficients combined
%           • Redundant entries removed
%
% DESCRIPTION:
%   In metabolic models, it's possible to have two metabolites with the
%   same name in the same compartment (e.g. "Acceptor[s]") due to errors in
%   draft model generation or merging steps.  
%   Such duplicates:
%     • Cause SBML export errors
%     • Confuse analysis tools
%
%   This function:
%     1. Identifies duplicates by case-insensitive metabolite name and compartment
%     2. Merges their stoichiometric coefficients in the S matrix
%     3. Removes redundant entries from all relevant fields
%
% NOTES:
%   • The merge is *lossless* for stoichiometry — coefficients are summed.
%   • If you have conflicting annotations between duplicates (e.g., different charges),
%     this function simply removes the duplicates, keeping the first occurrence.
%
% EXAMPLE:
%   model = mergeDuplicateMetNames(model);
%
% See also: cleanGrRulesGenes, fixSubsystemsField
% 
% This code was generated by ChatGPT

    %--------------------------------------------------------------
    % 1. Ensure metComps is numeric (points to model.comps indices)
    %--------------------------------------------------------------
    if isfield(model,'metComps') && iscell(model.metComps)
        % If metComps is a cell array of compartment IDs (e.g., {'c'; 'm'; 'e'}),
        % convert it to numeric indices into model.comps
        [~, model.metComps] = ismember(model.metComps, model.comps);
    end

    %--------------------------------------------------------------
    % 2. Build a key that identifies duplicates
    %--------------------------------------------------------------
    %   • lower(...)   → makes the match case-insensitive
    %   • "_"          → separates name from compartment
    %   • string(...)  → ensures numeric metComps can be concatenated
    key = strcat(lower(model.metNames), "_", string(model.metComps));

    %--------------------------------------------------------------
    % 3. Find unique keys and their group indices
    %--------------------------------------------------------------
    % unique(..., 'stable') → keeps first occurrence order
    % ic                    → integer group index for each metabolite
    [~, ~, ic] = unique(key, 'stable');

    %--------------------------------------------------------------
    % 4. Loop over each duplicate group
    %--------------------------------------------------------------
    for i = 1:max(ic)
        % Find all metabolites in this duplicate group
        idx = find(ic == i);

        if numel(idx) > 1
            % First occurrence will be kept, others merged into it
            keep = idx(1);
            dupes = idx(2:end);

            %------------------------------------------------------
            % 4.1 Merge stoichiometry into the 'keep' metabolite
            %------------------------------------------------------
            for d = dupes'
                model.S(keep,:) = model.S(keep,:) + model.S(d,:);
            end

            %------------------------------------------------------
            % 4.2 Remove duplicate entries from all relevant fields
            %------------------------------------------------------
            model.S(dupes,:)        = [];
            model.mets(dupes)       = [];
            model.metNames(dupes)   = [];

            if isfield(model,'metFormulas')
                model.metFormulas(dupes) = [];
            end
            if isfield(model,'metCharges')
                model.metCharges(dupes) = [];
            end
            if isfield(model,'b')
                model.b(dupes) = [];
            end
            if isfield(model,'metComps')
                model.metComps(dupes) = [];
            end
            if isfield(model,'metNotes')
                model.metNotes(dupes) = [];
            end
        end
    end
end
